
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue May 31 20:34:57 CST 2022
//----------------------------------------------------

package ejerciciojflex;

import java.util.ArrayList;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue May 31 20:34:57 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\011\000\002\004" +
    "\003\000\002\004\004\000\002\004\003\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\003\000\002\004\004\000\002" +
    "\004\003\000\002\004\004\000\002\011\005\000\002\011" +
    "\007\000\002\011\007\000\002\011\005\000\002\011\005" +
    "\000\002\011\007\000\002\011\006\000\002\011\007\000" +
    "\002\017\005\000\002\017\003\000\002\020\002\000\002" +
    "\020\003\000\002\022\003\000\002\016\005\000\002\016" +
    "\005\000\002\016\003\000\002\021\005\000\002\021\005" +
    "\000\002\021\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\005\000\002\023\003\000\002" +
    "\015\005\000\002\015\007\000\002\015\006\000\002\015" +
    "\007\000\002\014\005\000\002\014\007\000\002\014\006" +
    "\000\002\014\007\000\002\030\002\000\002\006\007\000" +
    "\002\025\004\000\002\005\004\000\002\024\004\000\002" +
    "\024\005\000\002\024\007\000\002\024\007\000\002\024" +
    "\003\000\002\024\003\000\002\026\005\000\002\026\005" +
    "\000\002\026\005\000\002\026\005\000\002\026\005\000" +
    "\002\026\005\000\002\026\004\000\002\031\002\000\002" +
    "\032\002\000\002\010\010\000\002\027\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\022\005\001\002\000\004\002\211\001" +
    "\002\000\004\050\006\001\002\000\004\045\007\001\002" +
    "\000\004\044\010\001\002\000\004\047\011\001\002\000" +
    "\040\006\022\015\034\020\043\022\024\023\045\024\041" +
    "\027\044\036\026\045\032\047\033\055\046\057\015\060" +
    "\042\074\025\075\020\001\002\000\042\006\uffcb\015\uffcb" +
    "\020\uffcb\022\uffcb\023\uffcb\024\uffcb\027\uffcb\036\uffcb\045" +
    "\uffcb\046\uffcb\047\uffcb\055\uffcb\057\uffcb\060\uffcb\074\uffcb" +
    "\075\uffcb\001\002\000\034\013\uffe1\037\uffe1\040\uffe1\041" +
    "\uffe1\043\uffe1\044\uffe1\045\uffe1\063\uffe1\064\uffe1\065\uffe1" +
    "\066\uffe1\067\uffe1\070\uffe1\001\002\000\042\006\ufff9\015" +
    "\ufff9\020\ufff9\022\ufff9\023\ufff9\024\ufff9\027\ufff9\036\ufff9" +
    "\045\ufff9\046\ufff9\047\ufff9\055\ufff9\057\ufff9\060\ufff9\074" +
    "\ufff9\075\ufff9\001\002\000\004\020\204\001\002\000\042" +
    "\006\022\015\034\020\043\022\024\023\045\024\041\027" +
    "\044\036\026\045\032\046\203\047\033\055\046\057\015" +
    "\060\042\074\025\075\020\001\002\000\016\006\022\015" +
    "\034\020\050\045\032\071\121\075\020\001\002\000\034" +
    "\013\uffe0\037\uffe0\040\uffe0\041\uffe0\043\uffe0\044\uffe0\045" +
    "\uffe0\063\uffe0\064\uffe0\065\uffe0\066\uffe0\067\uffe0\070\uffe0" +
    "\001\002\000\042\006\ufffd\015\ufffd\020\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\027\ufffd\036\ufffd\045\ufffd\046\ufffd\047\ufffd" +
    "\055\ufffd\057\ufffd\060\ufffd\074\ufffd\075\ufffd\001\002\000" +
    "\034\013\uffde\037\uffde\040\uffde\041\uffde\043\uffde\044\uffde" +
    "\045\uffde\063\uffde\064\uffde\065\uffde\066\uffde\067\uffde\070" +
    "\uffde\001\002\000\042\006\ufff5\015\ufff5\020\ufff5\022\ufff5" +
    "\023\ufff5\024\ufff5\027\ufff5\036\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\055\ufff5\057\ufff5\060\ufff5\074\ufff5\075\ufff5\001\002" +
    "\000\004\020\172\001\002\000\004\020\163\001\002\000" +
    "\004\045\157\001\002\000\042\006\uffff\015\uffff\020\uffff" +
    "\022\uffff\023\uffff\024\uffff\027\uffff\036\uffff\045\uffff\046" +
    "\uffff\047\uffff\055\uffff\057\uffff\060\uffff\074\uffff\075\uffff" +
    "\001\002\000\010\013\156\040\054\041\053\001\002\000" +
    "\042\006\ufffa\015\ufffa\020\ufffa\022\ufffa\023\ufffa\024\ufffa" +
    "\027\ufffa\036\ufffa\045\ufffa\046\ufffa\047\ufffa\055\ufffa\057" +
    "\ufffa\060\ufffa\074\ufffa\075\ufffa\001\002\000\014\006\022" +
    "\015\034\020\050\045\032\075\020\001\002\000\040\006" +
    "\022\015\034\020\043\022\024\023\045\024\041\027\044" +
    "\036\026\045\032\047\033\055\046\057\015\060\042\074" +
    "\025\075\020\001\002\000\034\013\uffdc\037\uffdc\040\uffdc" +
    "\041\uffdc\043\uffdc\044\uffdc\045\uffdc\063\uffdc\064\uffdc\065" +
    "\uffdc\066\uffdc\067\uffdc\070\uffdc\001\002\000\042\006\uffca" +
    "\015\uffca\020\uffca\022\uffca\023\uffca\024\uffca\027\uffca\036" +
    "\uffca\045\uffca\046\uffca\047\uffca\055\uffca\057\uffca\060\uffca" +
    "\074\uffca\075\uffca\001\002\000\034\013\uffe4\037\057\040" +
    "\uffe4\041\uffe4\043\056\044\uffe4\045\uffe4\063\uffe4\064\uffe4" +
    "\065\uffe4\066\uffe4\067\uffe4\070\uffe4\001\002\000\042\006" +
    "\ufff7\015\ufff7\020\ufff7\022\ufff7\023\ufff7\024\ufff7\027\ufff7" +
    "\036\ufff7\045\ufff7\046\ufff7\047\ufff7\055\ufff7\057\ufff7\060" +
    "\ufff7\074\ufff7\075\ufff7\001\002\000\016\006\uffc2\015\uffc2" +
    "\020\uffc2\045\uffc2\071\uffc2\075\uffc2\001\002\000\004\045" +
    "\117\001\002\000\004\020\110\001\002\000\016\011\101" +
    "\013\uffdf\037\uffdf\040\uffdf\041\uffdf\043\uffdf\001\002\000" +
    "\004\045\100\001\002\000\004\020\064\001\002\000\004" +
    "\045\047\001\002\000\014\006\022\015\034\020\050\045" +
    "\032\075\020\001\002\000\034\013\uffdf\037\uffdf\040\uffdf" +
    "\041\uffdf\043\uffdf\044\uffdf\045\uffdf\063\uffdf\064\uffdf\065" +
    "\uffdf\066\uffdf\067\uffdf\070\uffdf\001\002\000\010\040\054" +
    "\041\053\044\052\001\002\000\004\013\063\001\002\000" +
    "\014\006\022\015\034\020\050\045\032\075\020\001\002" +
    "\000\014\006\022\015\034\020\050\045\032\075\020\001" +
    "\002\000\034\013\uffe6\037\057\040\uffe6\041\uffe6\043\056" +
    "\044\uffe6\045\uffe6\063\uffe6\064\uffe6\065\uffe6\066\uffe6\067" +
    "\uffe6\070\uffe6\001\002\000\014\006\022\015\034\020\050" +
    "\045\032\075\020\001\002\000\014\006\022\015\034\020" +
    "\050\045\032\075\020\001\002\000\034\013\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\043\uffe3\044\uffe3\045\uffe3\063\uffe3\064" +
    "\uffe3\065\uffe3\066\uffe3\067\uffe3\070\uffe3\001\002\000\034" +
    "\013\uffe2\037\uffe2\040\uffe2\041\uffe2\043\uffe2\044\uffe2\045" +
    "\uffe2\063\uffe2\064\uffe2\065\uffe2\066\uffe2\067\uffe2\070\uffe2" +
    "\001\002\000\034\013\uffe5\037\057\040\uffe5\041\uffe5\043" +
    "\056\044\uffe5\045\uffe5\063\uffe5\064\uffe5\065\uffe5\066\uffe5" +
    "\067\uffe5\070\uffe5\001\002\000\042\006\uffcc\015\uffcc\020" +
    "\uffcc\022\uffcc\023\uffcc\024\uffcc\027\uffcc\036\uffcc\045\uffcc" +
    "\046\uffcc\047\uffcc\055\uffcc\057\uffcc\060\uffcc\074\uffcc\075" +
    "\uffcc\001\002\000\006\011\065\013\066\001\002\000\012" +
    "\013\uffe9\015\073\020\067\040\uffe9\001\002\000\042\006" +
    "\uffef\015\uffef\020\uffef\022\uffef\023\uffef\024\uffef\027\uffef" +
    "\036\uffef\045\uffef\046\uffef\047\uffef\055\uffef\057\uffef\060" +
    "\uffef\074\uffef\075\uffef\001\002\000\004\013\077\001\002" +
    "\000\006\013\uffea\040\uffea\001\002\000\006\013\074\040" +
    "\075\001\002\000\006\013\uffe8\040\uffe8\001\002\000\006" +
    "\013\uffe7\040\uffe7\001\002\000\042\006\uffee\015\uffee\020" +
    "\uffee\022\uffee\023\uffee\024\uffee\027\uffee\036\uffee\045\uffee" +
    "\046\uffee\047\uffee\055\uffee\057\uffee\060\uffee\074\uffee\075" +
    "\uffee\001\002\000\010\013\uffe9\015\073\040\uffe9\001\002" +
    "\000\006\013\uffeb\040\uffeb\001\002\000\042\006\uffec\015" +
    "\uffec\020\uffec\022\uffec\023\uffec\024\uffec\027\uffec\036\uffec" +
    "\045\uffec\046\uffec\047\uffec\055\uffec\057\uffec\060\uffec\074" +
    "\uffec\075\uffec\001\002\000\016\006\uffbf\015\uffbf\020\uffbf" +
    "\045\uffbf\071\uffbf\075\uffbf\001\002\000\020\006\022\010" +
    "\102\015\034\020\050\021\103\045\032\075\020\001\002" +
    "\000\004\013\107\001\002\000\004\013\106\001\002\000" +
    "\010\013\105\040\054\041\053\001\002\000\042\006\uffed" +
    "\015\uffed\020\uffed\022\uffed\023\uffed\024\uffed\027\uffed\036" +
    "\uffed\045\uffed\046\uffed\047\uffed\055\uffed\057\uffed\060\uffed" +
    "\074\uffed\075\uffed\001\002\000\042\006\uffd9\015\uffd9\020" +
    "\uffd9\022\uffd9\023\uffd9\024\uffd9\027\uffd9\036\uffd9\045\uffd9" +
    "\046\uffd9\047\uffd9\055\uffd9\057\uffd9\060\uffd9\074\uffd9\075" +
    "\uffd9\001\002\000\042\006\uffd5\015\uffd5\020\uffd5\022\uffd5" +
    "\023\uffd5\024\uffd5\027\uffd5\036\uffd5\045\uffd5\046\uffd5\047" +
    "\uffd5\055\uffd5\057\uffd5\060\uffd5\074\uffd5\075\uffd5\001\002" +
    "\000\006\011\111\013\112\001\002\000\006\010\114\020" +
    "\113\001\002\000\042\006\uffd7\015\uffd7\020\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\027\uffd7\036\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\055\uffd7\057\uffd7\060\uffd7\074\uffd7\075\uffd7\001\002" +
    "\000\004\013\116\001\002\000\004\013\115\001\002\000" +
    "\042\006\uffd6\015\uffd6\020\uffd6\022\uffd6\023\uffd6\024\uffd6" +
    "\027\uffd6\036\uffd6\045\uffd6\046\uffd6\047\uffd6\055\uffd6\057" +
    "\uffd6\060\uffd6\074\uffd6\075\uffd6\001\002\000\042\006\uffd4" +
    "\015\uffd4\020\uffd4\022\uffd4\023\uffd4\024\uffd4\027\uffd4\036" +
    "\uffd4\045\uffd4\046\uffd4\047\uffd4\055\uffd4\057\uffd4\060\uffd4" +
    "\074\uffd4\075\uffd4\001\002\000\016\006\uffd1\015\uffd1\020" +
    "\uffd1\045\uffd1\071\uffd1\075\uffd1\001\002\000\016\006\022" +
    "\015\034\020\050\045\032\071\121\075\020\001\002\000" +
    "\016\006\022\015\034\020\050\045\032\071\121\075\020" +
    "\001\002\000\022\040\054\041\053\063\130\064\133\065" +
    "\127\066\134\067\131\070\132\001\002\000\004\044\124" +
    "\001\002\000\026\006\uffc1\015\uffc1\020\uffc1\024\uffc1\027" +
    "\uffc1\036\uffc1\045\uffc1\047\uffc1\055\uffc1\075\uffc1\001\002" +
    "\000\026\006\022\015\034\020\050\024\041\027\044\036" +
    "\026\045\032\047\033\055\046\075\020\001\002\000\042" +
    "\006\uffc0\015\uffc0\020\uffc0\022\uffc0\023\uffc0\024\uffc0\027" +
    "\uffc0\036\uffc0\045\uffc0\046\uffc0\047\uffc0\055\uffc0\057\uffc0" +
    "\060\uffc0\074\uffc0\075\uffc0\001\002\000\014\006\022\015" +
    "\034\020\050\045\032\075\020\001\002\000\014\006\022" +
    "\015\034\020\050\045\032\075\020\001\002\000\014\006" +
    "\022\015\034\020\050\045\032\075\020\001\002\000\014" +
    "\006\022\015\034\020\050\045\032\075\020\001\002\000" +
    "\014\006\022\015\034\020\050\045\032\075\020\001\002" +
    "\000\014\006\022\015\034\020\050\045\032\075\020\001" +
    "\002\000\010\040\054\041\053\044\uffc6\001\002\000\010" +
    "\040\054\041\053\044\uffc8\001\002\000\010\040\054\041" +
    "\053\044\uffc4\001\002\000\010\040\054\041\053\044\uffc5" +
    "\001\002\000\010\040\054\041\053\044\uffc9\001\002\000" +
    "\010\040\054\041\053\044\uffc7\001\002\000\004\044\uffc3" +
    "\001\002\000\042\006\022\015\034\020\043\022\024\023" +
    "\045\024\041\027\044\036\026\045\032\046\151\047\033" +
    "\055\046\057\015\060\042\074\025\075\020\001\002\000" +
    "\042\006\ufff8\015\ufff8\020\ufff8\022\ufff8\023\ufff8\024\ufff8" +
    "\027\ufff8\036\ufff8\045\ufff8\046\ufff8\047\ufff8\055\ufff8\057" +
    "\ufff8\060\ufff8\074\ufff8\075\ufff8\001\002\000\042\006\ufffe" +
    "\015\ufffe\020\ufffe\022\ufffe\023\ufffe\024\ufffe\027\ufffe\036" +
    "\ufffe\045\ufffe\046\ufffe\047\ufffe\055\ufffe\057\ufffe\060\ufffe" +
    "\074\ufffe\075\ufffe\001\002\000\042\006\ufff4\015\ufff4\020" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\027\ufff4\036\ufff4\045\ufff4" +
    "\046\ufff4\047\ufff4\055\ufff4\057\ufff4\060\ufff4\074\ufff4\075" +
    "\ufff4\001\002\000\042\006\ufffc\015\ufffc\020\ufffc\022\ufffc" +
    "\023\ufffc\024\ufffc\027\ufffc\036\ufffc\045\ufffc\046\ufffc\047" +
    "\ufffc\055\ufffc\057\ufffc\060\ufffc\074\ufffc\075\ufffc\001\002" +
    "\000\042\006\uffce\015\uffce\020\uffce\022\uffce\023\uffce\024" +
    "\uffce\027\uffce\036\uffce\045\uffce\046\uffce\047\uffce\055\uffce" +
    "\057\uffce\060\uffce\074\uffce\075\uffce\001\002\000\042\006" +
    "\ufffb\015\ufffb\020\ufffb\022\ufffb\023\ufffb\024\ufffb\027\ufffb" +
    "\036\ufffb\045\ufffb\046\ufffb\047\ufffb\055\ufffb\057\ufffb\060" +
    "\ufffb\074\ufffb\075\ufffb\001\002\000\042\006\ufff6\015\ufff6" +
    "\020\ufff6\022\ufff6\023\ufff6\024\ufff6\027\ufff6\036\ufff6\045" +
    "\ufff6\046\ufff6\047\ufff6\055\ufff6\057\ufff6\060\ufff6\074\ufff6" +
    "\075\ufff6\001\002\000\010\040\054\041\053\045\155\001" +
    "\002\000\034\013\uffdd\037\uffdd\040\uffdd\041\uffdd\043\uffdd" +
    "\044\uffdd\045\uffdd\063\uffdd\064\uffdd\065\uffdd\066\uffdd\067" +
    "\uffdd\070\uffdd\001\002\000\042\006\uffcf\015\uffcf\020\uffcf" +
    "\022\uffcf\023\uffcf\024\uffcf\027\uffcf\036\uffcf\045\uffcf\046" +
    "\uffcf\047\uffcf\055\uffcf\057\uffcf\060\uffcf\074\uffcf\075\uffcf" +
    "\001\002\000\014\006\022\015\034\020\050\045\032\075" +
    "\020\001\002\000\010\040\054\041\053\044\161\001\002" +
    "\000\004\013\162\001\002\000\042\006\uffcd\015\uffcd\020" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\027\uffcd\036\uffcd\045\uffcd" +
    "\046\uffcd\047\uffcd\055\uffcd\057\uffcd\060\uffcd\074\uffcd\075" +
    "\uffcd\001\002\000\006\011\164\013\165\001\002\000\006" +
    "\020\166\021\167\001\002\000\042\006\uffdb\015\uffdb\020" +
    "\uffdb\022\uffdb\023\uffdb\024\uffdb\027\uffdb\036\uffdb\045\uffdb" +
    "\046\uffdb\047\uffdb\055\uffdb\057\uffdb\060\uffdb\074\uffdb\075" +
    "\uffdb\001\002\000\004\013\171\001\002\000\004\013\170" +
    "\001\002\000\042\006\uffda\015\uffda\020\uffda\022\uffda\023" +
    "\uffda\024\uffda\027\uffda\036\uffda\045\uffda\046\uffda\047\uffda" +
    "\055\uffda\057\uffda\060\uffda\074\uffda\075\uffda\001\002\000" +
    "\042\006\uffd8\015\uffd8\020\uffd8\022\uffd8\023\uffd8\024\uffd8" +
    "\027\uffd8\036\uffd8\045\uffd8\046\uffd8\047\uffd8\055\uffd8\057" +
    "\uffd8\060\uffd8\074\uffd8\075\uffd8\001\002\000\006\011\173" +
    "\013\174\001\002\000\014\006\022\015\034\020\050\045" +
    "\032\075\020\001\002\000\042\006\ufff3\015\ufff3\020\ufff3" +
    "\022\ufff3\023\ufff3\024\ufff3\027\ufff3\036\ufff3\045\ufff3\046" +
    "\ufff3\047\ufff3\055\ufff3\057\ufff3\060\ufff3\074\ufff3\075\ufff3" +
    "\001\002\000\010\013\176\040\054\041\053\001\002\000" +
    "\042\006\ufff2\015\ufff2\020\ufff2\022\ufff2\023\ufff2\024\ufff2" +
    "\027\ufff2\036\ufff2\045\ufff2\046\ufff2\047\ufff2\055\ufff2\057" +
    "\ufff2\060\ufff2\074\ufff2\075\ufff2\001\002\000\004\044\200" +
    "\001\002\000\026\006\uffd3\015\uffd3\020\uffd3\024\uffd3\027" +
    "\uffd3\036\uffd3\045\uffd3\047\uffd3\055\uffd3\075\uffd3\001\002" +
    "\000\026\006\022\015\034\020\050\024\041\027\044\036" +
    "\026\045\032\047\033\055\046\075\020\001\002\000\042" +
    "\006\uffd2\015\uffd2\020\uffd2\022\uffd2\023\uffd2\024\uffd2\027" +
    "\uffd2\036\uffd2\045\uffd2\046\uffd2\047\uffd2\055\uffd2\057\uffd2" +
    "\060\uffd2\074\uffd2\075\uffd2\001\002\000\004\002\000\001" +
    "\002\000\006\011\205\013\206\001\002\000\014\006\022" +
    "\015\034\020\050\045\032\075\020\001\002\000\042\006" +
    "\ufff0\015\ufff0\020\ufff0\022\ufff0\023\ufff0\024\ufff0\027\ufff0" +
    "\036\ufff0\045\ufff0\046\ufff0\047\ufff0\055\ufff0\057\ufff0\060" +
    "\ufff0\074\ufff0\075\ufff0\001\002\000\010\013\210\040\054" +
    "\041\053\001\002\000\042\006\ufff1\015\ufff1\020\ufff1\022" +
    "\ufff1\023\ufff1\024\ufff1\027\ufff1\036\ufff1\045\ufff1\046\ufff1" +
    "\047\ufff1\055\ufff1\057\ufff1\060\ufff1\074\ufff1\075\ufff1\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\004\015\006\011\010\034\011\026\012" +
    "\013\013\036\014\022\015\030\016\027\021\035\023\012" +
    "\024\020\025\016\027\037\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\011\010\034\011\147\012\144\013\152\014\146\015" +
    "\151\016\027\021\035\023\012\024\145\025\016\027\037" +
    "\001\001\000\012\016\121\021\035\023\012\026\176\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\153\021\035\023\012\001\001\000" +
    "\036\004\143\006\011\010\034\011\026\012\013\013\036" +
    "\014\022\015\030\016\027\021\035\023\012\024\020\025" +
    "\016\027\037\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\031\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\016\050\021\035\023\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\061\023" +
    "\012\001\001\000\006\021\054\023\012\001\001\000\002" +
    "\001\001\000\004\023\060\001\001\000\004\023\057\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\070\020" +
    "\067\022\071\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\075\022\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\103\021\035\023\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\016\121\021\035\023\012\026\122\001" +
    "\001\000\012\016\121\021\035\023\012\026\142\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\032\124\001" +
    "\001\000\022\006\011\010\034\016\027\021\035\023\012" +
    "\024\125\025\016\027\037\001\001\000\002\001\001\000" +
    "\010\016\141\021\035\023\012\001\001\000\010\016\140" +
    "\021\035\023\012\001\001\000\010\016\137\021\035\023" +
    "\012\001\001\000\010\016\136\021\035\023\012\001\001" +
    "\000\010\016\135\021\035\023\012\001\001\000\010\016" +
    "\134\021\035\023\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\034\006\011" +
    "\010\034\011\147\012\144\013\152\014\146\015\151\016" +
    "\027\021\035\023\012\024\145\025\016\027\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\016\157\021\035\023\012\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\016\174\021\035\023\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\030\200\001\001\000\022\006\011" +
    "\010\034\016\027\021\035\023\012\024\201\025\016\027" +
    "\037\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\016\206\021\035\023\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<Object> listaIdentificadores = new ArrayList<Object>(); 
    public int cont = 0;
    public int contErr =0;
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // parteWhile ::= While ParentesisA 
            {
              EtiquetaRedir RESULT =null;
		
                                String inicio=GeneradorTresDirecciones.nuevaEtiqueta();
                                String fin=GeneradorTresDirecciones.nuevaEtiqueta();
                                RESULT = new EtiquetaRedir(inicio,fin);
                              
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("parteWhile",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SENTENCIA_WHILE ::= parteWhile NT$1 CONDICION ParentesisC NT$2 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		EtiquetaRedir et = (EtiquetaRedir)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO,null,null,et.getInicio());
                        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL,null,null,c.f());
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_WHILE",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // NT$2 ::= 
            {
              Object RESULT =(Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		EtiquetaRedir et = (EtiquetaRedir)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		DosEtiquetas c = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL,null,null,c.v());
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$2",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$1 ::= 
            {
              Object RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		EtiquetaRedir et = (EtiquetaRedir)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL,null,null,et.getInicio());
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$1",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDICION ::= Negacion CONDICION 
            {
              DosEtiquetas RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		DosEtiquetas cond = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        RESULT = new DosEtiquetas(cond.f(), cond.v());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CONDICION ::= EXPR MayorIgual EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String v = GeneradorTresDirecciones.nuevaEtiqueta();
	String f = GeneradorTresDirecciones.nuevaEtiqueta();
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFMAYORIGUAL, e1, e2, f);
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, v);
        RESULT = new DosEtiquetas(v, f);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CONDICION ::= EXPR Mayor EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String v = GeneradorTresDirecciones.nuevaEtiqueta();
	String f = GeneradorTresDirecciones.nuevaEtiqueta();
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFMAYOR, e2, e1, v);
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, f);
        RESULT = new DosEtiquetas(v, f);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CONDICION ::= EXPR MenorIgual EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String v = GeneradorTresDirecciones.nuevaEtiqueta();
	String f = GeneradorTresDirecciones.nuevaEtiqueta();
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFMENORIGUAL, e2, e1, f);
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, v);
        RESULT = new DosEtiquetas(v, f);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONDICION ::= EXPR Menor EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String v = GeneradorTresDirecciones.nuevaEtiqueta();
        String f = GeneradorTresDirecciones.nuevaEtiqueta();
	GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFMENOR, e1, e2, v);
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, f);
        RESULT = new DosEtiquetas(v, f);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONDICION ::= EXPR Diferente EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String v = GeneradorTresDirecciones.nuevaEtiqueta();
        String f = GeneradorTresDirecciones.nuevaEtiqueta();
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFEQUAL, e1, e2, f);    
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, v);
        RESULT = new DosEtiquetas(v, f); 
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONDICION ::= EXPR IgualIgual EXPR 
            {
              DosEtiquetas RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
    String v = GeneradorTresDirecciones.nuevaEtiqueta();
    String f = GeneradorTresDirecciones.nuevaEtiqueta();
    GeneradorTresDirecciones.generador(GeneradorTresDirecciones.IFEQUAL, e1, e2, v);    
    GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, f);
    RESULT = new DosEtiquetas(v, f);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDICION",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENT ::= SENTENCIA_WHILE 
            {
              String RESULT =null;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENT ::= DECLARACION_IF 
            {
              String RESULT =null;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENT ::= Read ParentesisA EXPR ParentesisC ExprFinal 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		GeneradorTresDirecciones.generador(GeneradorTresDirecciones.READ, null, null, e);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENT ::= Print ParentesisA EXPR ParentesisC ExprFinal 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.PRINT, null, null, e);
          
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENT ::= LlaveA SENTENCIA LlaveC 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENT ::= EXPR ExprFinal 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		 RESULT = e1; 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENT",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PARTE_ELSE ::= Else SENT 
            {
              Object RESULT =null;
		 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARTE_ELSE",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PARTEIF ::= If ParentesisA 
            {
              EtiquetaRedir RESULT =null;
		 
        RESULT = new EtiquetaRedir(null,null);
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARTEIF",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_IF ::= PARTEIF CONDICION ParentesisC NT$0 SENT 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int etleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		EtiquetaRedir et = (EtiquetaRedir)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		DosEtiquetas cond = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
       
        String fin = GeneradorTresDirecciones.nuevaEtiqueta();
        //System.out.println("EL VALOR DE FIN= "+fin);
        et.fin(fin);           
        //System.out.println("EL VALOR DE ET= "+et.getFin());
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.GOTO, null, null, et.getFin());
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL, null, null, cond.f());
        
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL, null, null, et.getFin());
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_IF",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$0 ::= 
            {
              Object RESULT =null;
		int etleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int etright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		EtiquetaRedir et = (EtiquetaRedir)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int condleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		DosEtiquetas cond = (DosEtiquetas)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
 GeneradorTresDirecciones.generador(GeneradorTresDirecciones.LABEL, null, null, cond.v());
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NT$0",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_BOOLEAN ::= Bool Id Asig Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("bool")){
                            parser.listaIdentificadores.add(n1);
                            parser.listaIdentificadores.add(n2);
                            parser.listaIdentificadores.add(parser.listaIdentificadores.get(i+1));
                            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,parser.listaIdentificadores.get(i+1).toString(),null,n2.toString());
                            System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + parser.listaIdentificadores.get(i+1));
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR SEMANTICO: LA VARIABLE ENCONTRADA NO ES DE TIPO BOOLEAN");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR SEMANTICO: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_BOOLEAN ::= Id Asig Boolean ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                boolean bandera = false;
                for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                        if(parser.listaIdentificadores.get(i-1).equals("bool")){
                            parser.listaIdentificadores.set(i+1,n2);
                            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n1.toString(),null,n2.toString());
                            System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + n2);
                            bandera = true;
                            break;
                        }else{
                             parser.contErr+=1;
                            System.out.println("ERROR SEMANTICO: LA VARIABLE ENCOTRADA NO ES DE TIPO BOOLEAN");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR SEMANTICO:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_BOOLEAN ::= Bool Id Asig Boolean ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                  GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,n2.toString());
                  System.out.println("Declaracion de variable Boolean "+ n2 + " con valor " + n3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_BOOLEAN ::= Bool Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                 GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,"false",null,n2.toString());
                
                 System.out.println("Declaracion de variable Boolean: " +n2 + " sin valor");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_CHAR ::= CharType Id Asig Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("char")){
                            parser.listaIdentificadores.add(n1);
                            parser.listaIdentificadores.add(n2);
                            parser.listaIdentificadores.add(parser.listaIdentificadores.get(i+1));
                            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,n2.toString());
                            System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + parser.listaIdentificadores.get(i+1));
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR SEMANTICO: LA VARIABLE ENCONTRADA NO ES DE TIPO CHAR");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR SEMANTICO: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CHAR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_CHAR ::= Id Asig Char ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                boolean bandera = false;
                for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                        if(parser.listaIdentificadores.get(i-1).equals("char")){
                            parser.listaIdentificadores.set(i+1,n2);
                            System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + n2);
                            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n2.toString(),null,n1.toString());
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR SEMANTICO: LA VARIABLE ENCOTRADA NO ES DE TIPO CHAR");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CHAR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_CHAR ::= CharType Id Asig Char ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                  GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,n2.toString());
                  System.out.println("Declaracion de variable Char "+ n2 + " con valor " + n3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CHAR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION_CHAR ::= CharType Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                 GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,"",null,n2.toString());
                 System.out.println("Declaracion de variable Char: " +n2 + " sin valor");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CHAR",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TERMINO ::= Cadena 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=n1.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TERMINO ::= ParentesisA EXPR ParentesisA 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT=e1;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TERMINO ::= Flotante 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		RESULT=n1.toString();
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // TERMINO ::= Id 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    boolean bandera = false;
                    boolean bandera2 = false;
                    for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){

                        if(parser.listaIdentificadores.get(i).equals(n1)){

                                bandera2=true;

                                            
                        }
                        }if(bandera2){
                             RESULT=n1.toString();
                        }else{
                           parser.contErr+=1;
                           System.out.println("ERROR SEMANTICO: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                           RESULT=n1.toString();
                          
                           
                        }
                            
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TERMINO ::= Entero 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    
                    RESULT=n1.toString();
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINO",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // FACTOR ::= TERMINO 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         RESULT=n1;
    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FACTOR ::= FACTOR Division TERMINO 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
        String t=GeneradorTresDirecciones.nuevaTemp();
        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.DIVISION,n1.toString(),n2.toString(),t);
         RESULT= t;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FACTOR ::= FACTOR Multiplicacion TERMINO 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
     String t=GeneradorTresDirecciones.nuevaTemp();
     GeneradorTresDirecciones.generador(GeneradorTresDirecciones.POR,n1.toString(),n2.toString(),t);
    // System.out.println("Pronado n1: " + n1 + " Provando n2 : "+ n2);
     RESULT= t;
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTOR",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // EXPR ::= FACTOR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
               //System.out.println("Este es n1 " + n1);
                //GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n1.toString(),null,parser.listaIdentificadores.get(parser.listaIdentificadores.size()-2).toString());
              RESULT= n1;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // EXPR ::= EXPR Resta FACTOR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
             String t=GeneradorTresDirecciones.nuevaTemp();
             GeneradorTresDirecciones.generador(GeneradorTresDirecciones.MENOS,n1.toString(),n2.toString(),t);
             RESULT= t;
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPR ::= EXPR Suma FACTOR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
               String t=GeneradorTresDirecciones.nuevaTemp();
               GeneradorTresDirecciones.generador(GeneradorTresDirecciones.MAS,n1.toString(),n2.toString(),t);
               //System.out.println("Este es n2 " + n2 + "este es n1: " +n1);
                RESULT= t;
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TERMINOSTR ::= Cadena 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    
                    RESULT=n1.toString();
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TERMINOSTR",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FACTORSTR ::= TERMINOSTR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
         RESULT=n1;
    
    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTORSTR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FACTORSTR ::= 
            {
              String RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FACTORSTR",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRSTR ::= FACTORSTR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
               //System.out.println("Este es n1 " + n1);
                //GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n1.toString(),null,parser.listaIdentificadores.get(parser.listaIdentificadores.size()-2).toString());
              RESULT= n1;
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRSTR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRSTR ::= EXPRSTR Suma FACTORSTR 
            {
              String RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
               String t=GeneradorTresDirecciones.nuevaTemp();
               GeneradorTresDirecciones.generador(GeneradorTresDirecciones.MAS,n1.toString(),n2.toString(),t);
               //System.out.println("Este es n2 " + n2 + "este es n1: " +n1);
                RESULT= t;
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXPRSTR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_ENTEROS ::= String Id Asig Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 //System.out.println(n3);
                 boolean bandera = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("string")){
                            parser.listaIdentificadores.add(n1);
                            parser.listaIdentificadores.add(n2);
                            parser.listaIdentificadores.add(parser.listaIdentificadores.get(i+1));
                            GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,parser.listaIdentificadores.get(i+1).toString(),null,n2.toString());
                            System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + parser.listaIdentificadores.get(i+1));
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR SEMANTICO: LA VARIABLE ENCONTRADA NO ES DE TIPO STRING");
                        }
                    }
                }
                if(bandera){

                }else{
                    parser.contErr+=1;
                    System.out.println("ERROR SEMANTICO: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_ENTEROS ::= Id Asig EXPR ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                
                boolean bandera = false;
                boolean bandera2 = false;
                for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                            
                            bandera2=true;
                      
                              
                                
                                   
                                       
                                        
                                        //parser.listaIdentificadores.add(parser.listaIdentificadores.get(j-1));
                                        //parser.listaIdentificadores.add(n1);
                                        //parser.listaIdentificadores.add(parser.listaIdentificadores.get(j+1));
                                        //System.out.println("Identificador de la lista: "+ parser.listaIdentificadores.get(i)+ "  Variable que compara: "+ n1);
                                        parser.listaIdentificadores.set(i+1,n2.toString());
                                        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n2.toString(),null,parser.listaIdentificadores.get(i).toString());
                                        //System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + parser.listaIdentificadores.get(j+1));
                                        bandera = true;
                                        break;
                                    
                                
                            
                    }
                }if(bandera2){
                    
                }else{
                   parser.contErr+=1;
                   System.out.println("ERROR SEMANTICO: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_ENTEROS ::= String Id Asig EXPRSTR ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                 //System.out.println(" El resultado de la operacion N3: "+Integer.valueOf(n3.toString()));
                   
                  //String t=GeneradorTresDirecciones.nuevaTemp();
                  GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,n2.toString());
                  
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_ENTEROS ::= String Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG," ",null,n2.toString());
                 System.out.println("Declaracion de variable String " + n2 + " sin valor");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION_ENTEROS ::= Float Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                 GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,"0",null,n2.toString());
                 System.out.println("Declaracion de variable entera " + n2 + " sin valor");

                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION_ENTEROS ::= Float Id Asig EXPR ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                 //System.out.println(" El resultado de la operacion N3: "+Integer.valueOf(n3.toString()));
                   
                  //String t=GeneradorTresDirecciones.nuevaTemp();
                  GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,n2.toString());
                  
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION_ENTEROS ::= Int Id Asig EXPR ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		String n3 = (String)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  if(n3.contains(".")){
                        System.out.println("ERROR SEMANTICO: EL TIPO INT NO RECONOCE: "+n3);

                  }else{
                        parser.listaIdentificadores.add(n1);
                        parser.listaIdentificadores.add(n2);
                        parser.listaIdentificadores.add(n3);
                       //System.out.println(" El resultado de la operacion N3: ");
                        //System.out.println("Declaracion de variable entera " + n2 + "con valor: "+n3);
                        //String t=GeneradorTresDirecciones.nuevaTemp();
                        GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,n3.toString(),null,n2.toString());

                  }
                  
                  
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION_ENTEROS ::= Int Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                 GeneradorTresDirecciones.generador(GeneradorTresDirecciones.ASIG,"0",null,n2.toString());
                 System.out.println("Declaracion de variable entera " + n2 + " sin valor");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SENTENCIA ::= SENTENCIA DECLARACION_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SENTENCIA ::= DECLARACION_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA DECLARACION_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DECLARACION_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA DECLARACION_FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= DECLARACION_FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= DECLARACION_CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= SENTENCIA DECLARACION_CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA DECLARACION_ENTEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA SENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= DECLARACION_ENTEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int main ParentesisA ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

