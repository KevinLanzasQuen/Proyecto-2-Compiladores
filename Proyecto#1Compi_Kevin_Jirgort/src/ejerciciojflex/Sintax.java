
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed May 25 22:53:39 CST 2022
//----------------------------------------------------

package ejerciciojflex;

import java.util.ArrayList;
import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed May 25 22:53:39 CST 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\011\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\004\005\000\002\004\011\000\002\004\007\000\002\004" +
    "\011\000\002\004\011\000\002\004\011\000\002\004\006" +
    "\000\002\004\007\000\002\004\011\000\002\004\011\000" +
    "\002\004\011\000\002\004\011\000\002\004\010\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\005" +
    "\005\000\002\005\011\000\002\005\007\000\002\005\011" +
    "\000\002\005\011\000\002\005\011\000\002\005\006\000" +
    "\002\005\007\000\002\005\011\000\002\005\011\000\002" +
    "\005\011\000\002\005\011\000\002\005\011\000\002\005" +
    "\011\000\002\005\011\000\002\005\011\000\002\005\011" +
    "\000\002\005\011\000\002\005\011\000\002\005\011\000" +
    "\002\006\005\000\002\006\007\000\002\006\011\000\002" +
    "\006\006\000\002\006\007\000\002\006\006\000\002\007" +
    "\005\000\002\007\007\000\002\007\006\000\002\007\007" +
    "\000\002\010\005\000\002\010\007\000\002\010\007\000" +
    "\002\010\006\000\002\010\006\000\002\010\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\004\024\005\001\002\000\004\002\244\001" +
    "\002\000\004\052\006\001\002\000\004\047\007\001\002" +
    "\000\004\046\010\001\002\000\004\051\011\001\002\000" +
    "\016\022\014\024\021\025\024\061\012\062\013\063\023" +
    "\001\002\000\004\022\160\001\002\000\004\022\151\001" +
    "\002\000\004\011\116\001\002\000\020\022\ufffb\024\ufffb" +
    "\025\ufffb\050\ufffb\061\ufffb\062\ufffb\063\ufffb\001\002\000" +
    "\020\022\ufffd\024\ufffd\025\ufffd\050\ufffd\061\ufffd\062\ufffd" +
    "\063\ufffd\001\002\000\020\022\ufff7\024\ufff7\025\ufff7\050" +
    "\ufff7\061\ufff7\062\ufff7\063\ufff7\001\002\000\020\022\ufff9" +
    "\024\ufff9\025\ufff9\050\ufff9\061\ufff9\062\ufff9\063\ufff9\001" +
    "\002\000\004\022\057\001\002\000\020\022\014\024\021" +
    "\025\024\050\052\061\012\062\013\063\023\001\002\000" +
    "\004\022\040\001\002\000\004\022\026\001\002\000\020" +
    "\022\uffff\024\uffff\025\uffff\050\uffff\061\uffff\062\uffff\063" +
    "\uffff\001\002\000\006\011\027\013\030\001\002\000\006" +
    "\016\032\022\031\001\002\000\020\022\uffd1\024\uffd1\025" +
    "\uffd1\050\uffd1\061\uffd1\062\uffd1\063\uffd1\001\002\000\004" +
    "\013\037\001\002\000\006\013\033\042\034\001\002\000" +
    "\020\022\uffd0\024\uffd0\025\uffd0\050\uffd0\061\uffd0\062\uffd0" +
    "\063\uffd0\001\002\000\004\016\035\001\002\000\004\013" +
    "\036\001\002\000\020\022\uffcf\024\uffcf\025\uffcf\050\uffcf" +
    "\061\uffcf\062\uffcf\063\uffcf\001\002\000\020\022\uffcd\024" +
    "\uffcd\025\uffcd\050\uffcd\061\uffcd\062\uffcd\063\uffcd\001\002" +
    "\000\006\011\041\013\042\001\002\000\010\022\044\064" +
    "\045\065\043\001\002\000\020\022\uffc7\024\uffc7\025\uffc7" +
    "\050\uffc7\061\uffc7\062\uffc7\063\uffc7\001\002\000\004\013" +
    "\050\001\002\000\004\013\047\001\002\000\004\013\046" +
    "\001\002\000\020\022\uffc6\024\uffc6\025\uffc6\050\uffc6\061" +
    "\uffc6\062\uffc6\063\uffc6\001\002\000\020\022\uffc2\024\uffc2" +
    "\025\uffc2\050\uffc2\061\uffc2\062\uffc2\063\uffc2\001\002\000" +
    "\020\022\uffc5\024\uffc5\025\uffc5\050\uffc5\061\uffc5\062\uffc5" +
    "\063\uffc5\001\002\000\020\022\ufffa\024\ufffa\025\ufffa\050" +
    "\ufffa\061\ufffa\062\ufffa\063\ufffa\001\002\000\004\002\000" +
    "\001\002\000\020\022\ufffc\024\ufffc\025\ufffc\050\ufffc\061" +
    "\ufffc\062\ufffc\063\ufffc\001\002\000\020\022\ufff6\024\ufff6" +
    "\025\ufff6\050\ufff6\061\ufff6\062\ufff6\063\ufff6\001\002\000" +
    "\020\022\ufff8\024\ufff8\025\ufff8\050\ufff8\061\ufff8\062\ufff8" +
    "\063\ufff8\001\002\000\020\022\ufffe\024\ufffe\025\ufffe\050" +
    "\ufffe\061\ufffe\062\ufffe\063\ufffe\001\002\000\006\011\060" +
    "\013\061\001\002\000\006\020\063\022\062\001\002\000" +
    "\020\022\ufff5\024\ufff5\025\ufff5\050\ufff5\061\ufff5\062\ufff5" +
    "\063\ufff5\001\002\000\014\013\103\041\105\042\104\043" +
    "\102\045\101\001\002\000\014\013\065\041\070\042\067" +
    "\043\066\045\064\001\002\000\004\020\077\001\002\000" +
    "\020\022\ufff3\024\ufff3\025\ufff3\050\ufff3\061\ufff3\062\ufff3" +
    "\063\ufff3\001\002\000\004\020\075\001\002\000\004\020" +
    "\073\001\002\000\004\020\071\001\002\000\004\013\072" +
    "\001\002\000\020\022\ufff1\024\ufff1\025\ufff1\050\ufff1\061" +
    "\ufff1\062\ufff1\063\ufff1\001\002\000\004\013\074\001\002" +
    "\000\020\022\ufff2\024\ufff2\025\ufff2\050\ufff2\061\ufff2\062" +
    "\ufff2\063\ufff2\001\002\000\004\013\076\001\002\000\020" +
    "\022\ufff0\024\ufff0\025\ufff0\050\ufff0\061\ufff0\062\ufff0\063" +
    "\ufff0\001\002\000\004\013\100\001\002\000\020\022\ufff4" +
    "\024\ufff4\025\ufff4\050\ufff4\061\ufff4\062\ufff4\063\ufff4\001" +
    "\002\000\004\022\114\001\002\000\004\022\112\001\002" +
    "\000\020\022\uffee\024\uffee\025\uffee\050\uffee\061\uffee\062" +
    "\uffee\063\uffee\001\002\000\004\022\110\001\002\000\004" +
    "\022\106\001\002\000\004\013\107\001\002\000\020\022" +
    "\uffeb\024\uffeb\025\uffeb\050\uffeb\061\uffeb\062\uffeb\063\uffeb" +
    "\001\002\000\004\013\111\001\002\000\020\022\uffed\024" +
    "\uffed\025\uffed\050\uffed\061\uffed\062\uffed\063\uffed\001\002" +
    "\000\004\013\113\001\002\000\020\022\uffec\024\uffec\025" +
    "\uffec\050\uffec\061\uffec\062\uffec\063\uffec\001\002\000\004" +
    "\013\115\001\002\000\020\022\uffea\024\uffea\025\uffea\050" +
    "\uffea\061\uffea\062\uffea\063\uffea\001\002\000\020\006\117" +
    "\016\125\020\124\022\122\023\120\064\123\065\121\001" +
    "\002\000\004\013\150\001\002\000\004\013\147\001\002" +
    "\000\004\013\146\001\002\000\014\013\133\041\135\042" +
    "\134\043\132\045\131\001\002\000\004\013\130\001\002" +
    "\000\004\013\127\001\002\000\004\013\126\001\002\000" +
    "\020\022\uffce\024\uffce\025\uffce\050\uffce\061\uffce\062\uffce" +
    "\063\uffce\001\002\000\020\022\uffef\024\uffef\025\uffef\050" +
    "\uffef\061\uffef\062\uffef\063\uffef\001\002\000\020\022\uffc4" +
    "\024\uffc4\025\uffc4\050\uffc4\061\uffc4\062\uffc4\063\uffc4\001" +
    "\002\000\004\022\144\001\002\000\004\022\142\001\002" +
    "\000\020\022\uffcc\024\uffcc\025\uffcc\050\uffcc\061\uffcc\062" +
    "\uffcc\063\uffcc\001\002\000\004\022\140\001\002\000\004" +
    "\022\136\001\002\000\004\013\137\001\002\000\020\022" +
    "\uffe7\024\uffe7\025\uffe7\050\uffe7\061\uffe7\062\uffe7\063\uffe7" +
    "\001\002\000\004\013\141\001\002\000\020\022\uffe9\024" +
    "\uffe9\025\uffe9\050\uffe9\061\uffe9\062\uffe9\063\uffe9\001\002" +
    "\000\004\013\143\001\002\000\020\022\uffe8\024\uffe8\025" +
    "\uffe8\050\uffe8\061\uffe8\062\uffe8\063\uffe8\001\002\000\004" +
    "\013\145\001\002\000\020\022\uffe6\024\uffe6\025\uffe6\050" +
    "\uffe6\061\uffe6\062\uffe6\063\uffe6\001\002\000\020\022\uffc3" +
    "\024\uffc3\025\uffc3\050\uffc3\061\uffc3\062\uffc3\063\uffc3\001" +
    "\002\000\020\022\uffc9\024\uffc9\025\uffc9\050\uffc9\061\uffc9" +
    "\062\uffc9\063\uffc9\001\002\000\020\022\uffdf\024\uffdf\025" +
    "\uffdf\050\uffdf\061\uffdf\062\uffdf\063\uffdf\001\002\000\006" +
    "\011\152\013\153\001\002\000\006\022\154\023\155\001" +
    "\002\000\020\022\uffcb\024\uffcb\025\uffcb\050\uffcb\061\uffcb" +
    "\062\uffcb\063\uffcb\001\002\000\004\013\157\001\002\000" +
    "\004\013\156\001\002\000\020\022\uffca\024\uffca\025\uffca" +
    "\050\uffca\061\uffca\062\uffca\063\uffca\001\002\000\020\022" +
    "\uffc8\024\uffc8\025\uffc8\050\uffc8\061\uffc8\062\uffc8\063\uffc8" +
    "\001\002\000\006\011\161\013\162\001\002\000\010\006" +
    "\163\020\165\022\164\001\002\000\020\022\uffe5\024\uffe5" +
    "\025\uffe5\050\uffe5\061\uffe5\062\uffe5\063\uffe5\001\002\000" +
    "\014\013\220\041\223\042\222\043\221\045\217\001\002" +
    "\000\014\013\203\041\206\042\205\043\204\045\202\001" +
    "\002\000\012\041\171\042\170\043\167\045\166\001\002" +
    "\000\004\006\200\001\002\000\004\006\176\001\002\000" +
    "\004\006\174\001\002\000\004\006\172\001\002\000\004" +
    "\013\173\001\002\000\020\022\uffd8\024\uffd8\025\uffd8\050" +
    "\uffd8\061\uffd8\062\uffd8\063\uffd8\001\002\000\004\013\175" +
    "\001\002\000\020\022\uffdc\024\uffdc\025\uffdc\050\uffdc\061" +
    "\uffdc\062\uffdc\063\uffdc\001\002\000\004\013\177\001\002" +
    "\000\020\022\uffd6\024\uffd6\025\uffd6\050\uffd6\061\uffd6\062" +
    "\uffd6\063\uffd6\001\002\000\004\013\201\001\002\000\020" +
    "\022\uffda\024\uffda\025\uffda\050\uffda\061\uffda\062\uffda\063" +
    "\uffda\001\002\000\004\022\215\001\002\000\020\022\uffde" +
    "\024\uffde\025\uffde\050\uffde\061\uffde\062\uffde\063\uffde\001" +
    "\002\000\004\022\213\001\002\000\004\022\211\001\002" +
    "\000\004\022\207\001\002\000\004\013\210\001\002\000" +
    "\020\022\uffd3\024\uffd3\025\uffd3\050\uffd3\061\uffd3\062\uffd3" +
    "\063\uffd3\001\002\000\004\013\212\001\002\000\020\022" +
    "\uffd5\024\uffd5\025\uffd5\050\uffd5\061\uffd5\062\uffd5\063\uffd5" +
    "\001\002\000\004\013\214\001\002\000\020\022\uffd4\024" +
    "\uffd4\025\uffd4\050\uffd4\061\uffd4\062\uffd4\063\uffd4\001\002" +
    "\000\004\013\216\001\002\000\020\022\uffd2\024\uffd2\025" +
    "\uffd2\050\uffd2\061\uffd2\062\uffd2\063\uffd2\001\002\000\006" +
    "\006\240\020\241\001\002\000\020\022\uffe3\024\uffe3\025" +
    "\uffe3\050\uffe3\061\uffe3\062\uffe3\063\uffe3\001\002\000\006" +
    "\006\234\020\235\001\002\000\006\006\230\020\231\001" +
    "\002\000\006\006\224\020\225\001\002\000\004\013\227" +
    "\001\002\000\004\013\226\001\002\000\020\022\uffd9\024" +
    "\uffd9\025\uffd9\050\uffd9\061\uffd9\062\uffd9\063\uffd9\001\002" +
    "\000\020\022\uffe1\024\uffe1\025\uffe1\050\uffe1\061\uffe1\062" +
    "\uffe1\063\uffe1\001\002\000\004\013\233\001\002\000\004" +
    "\013\232\001\002\000\020\022\uffdd\024\uffdd\025\uffdd\050" +
    "\uffdd\061\uffdd\062\uffdd\063\uffdd\001\002\000\020\022\uffe2" +
    "\024\uffe2\025\uffe2\050\uffe2\061\uffe2\062\uffe2\063\uffe2\001" +
    "\002\000\004\013\237\001\002\000\004\013\236\001\002" +
    "\000\020\022\uffd7\024\uffd7\025\uffd7\050\uffd7\061\uffd7\062" +
    "\uffd7\063\uffd7\001\002\000\020\022\uffe0\024\uffe0\025\uffe0" +
    "\050\uffe0\061\uffe0\062\uffe0\063\uffe0\001\002\000\004\013" +
    "\243\001\002\000\004\013\242\001\002\000\020\022\uffdb" +
    "\024\uffdb\025\uffdb\050\uffdb\061\uffdb\062\uffdb\063\uffdb\001" +
    "\002\000\020\022\uffe4\024\uffe4\025\uffe4\050\uffe4\061\uffe4" +
    "\062\uffe4\063\uffe4\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\242\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\003\021\004\024\005\015\006\014\007" +
    "\017\010\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\004\055\005\052\006\050\007\054\010\053\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ArrayList<Object> listaIdentificadores = new ArrayList<Object>(); 
    public int cont = 0;
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARACION_BOOLEAN ::= Bool Id Asig Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("bool")){
                            parser.listaIdentificadores.add(n1);
                            parser.listaIdentificadores.add(n2);
                            parser.listaIdentificadores.add(parser.listaIdentificadores.get(i+1));
                            System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + parser.listaIdentificadores.get(i+1));
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR: LA VARIABLE ENCONTRADA NO ES DE TIPO BOOLEAN");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARACION_BOOLEAN ::= Id Asig False ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                boolean bandera = false;
                for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                        if(parser.listaIdentificadores.get(i-1).equals("bool")){
                            parser.listaIdentificadores.set(i+1,n2);
                            System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + n2);
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR: LA VARIABLE ENCOTRADA NO ES DE TIPO BOOLEAN");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARACION_BOOLEAN ::= Id Asig True ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                boolean bandera = false;
                for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                        if(parser.listaIdentificadores.get(i-1).equals("bool")){
                            parser.listaIdentificadores.set(i+1,n2);
                            System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + n2);
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR: LA VARIABLE ENCOTRADA NO ES DE TIPO BOOLEAN");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DECLARACION_BOOLEAN ::= Bool Id Asig False ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                  System.out.println("Declaracion de variable Boolean "+ n2 + " con valor " + n3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // DECLARACION_BOOLEAN ::= Bool Id Asig True ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                  System.out.println("Declaracion de variable Boolean "+ n2 + " con valor " + n3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACION_BOOLEAN ::= Bool Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                 System.out.println("Declaracion de variable Boolean: " +n2 + " sin valor");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_BOOLEAN",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACION_CHAR ::= CharType Id Asig Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("char")){
                            parser.listaIdentificadores.add(n1);
                            parser.listaIdentificadores.add(n2);
                            parser.listaIdentificadores.add(parser.listaIdentificadores.get(i+1));
                            System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + parser.listaIdentificadores.get(i+1));
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR: LA VARIABLE ENCONTRADA NO ES DE TIPO CHAR");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CHAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACION_CHAR ::= Id Asig Char ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                boolean bandera = false;
                for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                        if(parser.listaIdentificadores.get(i-1).equals("char")){
                            parser.listaIdentificadores.set(i+1,n2);
                            System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + n2);
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR: LA VARIABLE ENCOTRADA NO ES DE TIPO CHAR");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CHAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // DECLARACION_CHAR ::= CharType Id Asig Char ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                  System.out.println("Declaracion de variable Char "+ n2 + " con valor " + n3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CHAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // DECLARACION_CHAR ::= CharType Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                 System.out.println("Declaracion de variable Char: " +n2 + " sin valor");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_CHAR",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // DECLARACION_STRING ::= Id Asig Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                boolean bandera = false;
                boolean bandera2 = false;
                for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                            bandera2=true;
                            for(int j = 1;j < parser.listaIdentificadores.size();j=j+3){
                                if(parser.listaIdentificadores.get(j).equals(n2)){
                                    if(parser.listaIdentificadores.get(j-1).equals(parser.listaIdentificadores.get(i-1))){
                                        parser.listaIdentificadores.add(parser.listaIdentificadores.get(j-1));
                                        parser.listaIdentificadores.add(n1);
                                        parser.listaIdentificadores.add(parser.listaIdentificadores.get(j+1));
                                        System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + parser.listaIdentificadores.get(j+1));
                                        bandera = true;
                                        break;
                                    }else{
                                        System.out.println("ERROR: ASIGNACION INCOMPATIBLE LAS VARIABLES NO PERTENECEN AL MISMO TIPO DE DATO");
                                    }
                                }
                            }if(bandera){
                                break;
                            }else{
                                System.out.println("ERROR: LA VARIABLE " + n2 + " NO HA SIDO DECLARADA");
                            }
                    }
                }if(bandera){
                    
                }else{
                   System.out.println("ERROR: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
             
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRING",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // DECLARACION_STRING ::= String Id Asig Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("string")){
                            parser.listaIdentificadores.add(n1);
                            parser.listaIdentificadores.add(n2);
                            parser.listaIdentificadores.add(parser.listaIdentificadores.get(i+1));
                            System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + parser.listaIdentificadores.get(i+1));
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR: LA VARIABLE ENCONTRADA NO ES DE TIPO STRING");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRING",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // DECLARACION_STRING ::= Id Asig Cadena ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                boolean bandera = false;
                for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                        if(parser.listaIdentificadores.get(i-1).equals("string")){
                            parser.listaIdentificadores.set(i+1,n2);
                            System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + n2);
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR: LA VARIABLE ENCOTRADA NO ES DE TIPO STRING");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRING",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECLARACION_STRING ::= String Id Asig Cadena Suma Cadena ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3.toString() + n4.toString());
                  System.out.println("Declaracion de variable entera " + n2 + " por medio de la suma " + n3 + " + " +n4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRING",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECLARACION_STRING ::= String Id Asig Cadena ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                  System.out.println("Declaracion de variable String "+ n2 + " con valor " + n3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRING",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // DECLARACION_STRING ::= String Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                 System.out.println("Declaracion de variable String: " +n2 + " sin valor");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_STRING",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // DECLARACION_FLOAT ::= Float Id Asig Id Division Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 boolean bandera2 = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("float")){
                            bandera2 = true;
                            for(int j = 1;j < parser.listaIdentificadores.size();j=j+3){
                                if(parser.listaIdentificadores.get(j).equals(n4)){
                                    if(parser.listaIdentificadores.get(j-1).equals("float")){
                                        parser.listaIdentificadores.add(n1);
                                        parser.listaIdentificadores.add(n2);
                                        parser.listaIdentificadores.add(Float.valueOf(parser.listaIdentificadores.get(i+1).toString()) / Float.valueOf(parser.listaIdentificadores.get(j+1).toString()));
                                        System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + (Float.valueOf(parser.listaIdentificadores.get(i+1).toString()) / Float.valueOf(parser.listaIdentificadores.get(j+1).toString())));
                                        bandera = true;
                                        break;
                                    }else{
                                       System.out.println("ERROR: LA VARIABLE " + n4 + " NO ES DE TIPO FLOTANTE");
                                    }
                                }
                            }if(bandera){
                                break;
                            }else{
                                System.out.println("ERROR:LA VARIABLE " + n4 + " NO HA SIDO DECLARADA");
                            }
                        }else{
                            System.out.println("ERROR: LA VARIABLE " + n3 + " NO ES DE TIPO FLOTANTE");
                        }
                    }
                }
                if(bandera2){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n3 + " NO HA SIDO DECLARADA");
                }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // DECLARACION_FLOAT ::= Float Id Asig Id Multiplicacion Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 boolean bandera2 = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("float")){
                            bandera2 = true;
                            for(int j = 1;j < parser.listaIdentificadores.size();j=j+3){
                                if(parser.listaIdentificadores.get(j).equals(n4)){
                                    if(parser.listaIdentificadores.get(j-1).equals("float")){
                                        parser.listaIdentificadores.add(n1);
                                        parser.listaIdentificadores.add(n2);
                                        parser.listaIdentificadores.add(Float.valueOf(parser.listaIdentificadores.get(i+1).toString()) * Float.valueOf(parser.listaIdentificadores.get(j+1).toString()));
                                        System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + (Float.valueOf(parser.listaIdentificadores.get(i+1).toString()) * Float.valueOf(parser.listaIdentificadores.get(j+1).toString())));
                                        bandera = true;
                                        break;
                                    }else{
                                       System.out.println("ERROR: LA VARIABLE " + n4 + " NO ES DE TIPO FLOTANTE");
                                    }
                                }
                            }if(bandera){
                                break;
                            }else{
                                System.out.println("ERROR:LA VARIABLE " + n4 + " NO HA SIDO DECLARADA");
                            }
                        }else{
                            System.out.println("ERROR: LA VARIABLE " + n3 + " NO ES DE TIPO FLOTANTE");
                        }
                    }
                }
                if(bandera2){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n3 + " NO HA SIDO DECLARADA");
                }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DECLARACION_FLOAT ::= Float Id Asig Id Resta Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 boolean bandera2 = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("float")){
                            bandera2 = true;
                            for(int j = 1;j < parser.listaIdentificadores.size();j=j+3){
                                if(parser.listaIdentificadores.get(j).equals(n4)){
                                    if(parser.listaIdentificadores.get(j-1).equals("float")){
                                        parser.listaIdentificadores.add(n1);
                                        parser.listaIdentificadores.add(n2);
                                        parser.listaIdentificadores.add(Float.valueOf(parser.listaIdentificadores.get(i+1).toString()) - Float.valueOf(parser.listaIdentificadores.get(j+1).toString()));
                                        System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + (Float.valueOf(parser.listaIdentificadores.get(i+1).toString()) - Float.valueOf(parser.listaIdentificadores.get(j+1).toString())));
                                        bandera = true;
                                        break;
                                    }else{
                                       System.out.println("ERROR: LA VARIABLE " + n4 + " NO ES DE TIPO FLOTANTE");
                                    }
                                }
                            }if(bandera){
                                break;
                            }else{
                                System.out.println("ERROR:LA VARIABLE " + n4 + " NO HA SIDO DECLARADA");
                            }
                        }else{
                            System.out.println("ERROR: LA VARIABLE " + n3 + " NO ES DE TIPO FLOTANTE");
                        }
                    }
                }
                if(bandera2){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n3 + " NO HA SIDO DECLARADA");
                }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DECLARACION_FLOAT ::= Float Id Asig Id Suma Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 boolean bandera2 = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("float")){
                            bandera2 = true;
                            for(int j = 1;j < parser.listaIdentificadores.size();j=j+3){
                                if(parser.listaIdentificadores.get(j).equals(n4)){
                                    if(parser.listaIdentificadores.get(j-1).equals("float")){
                                        parser.listaIdentificadores.add(n1);
                                        parser.listaIdentificadores.add(n2);
                                        parser.listaIdentificadores.add(Float.valueOf(parser.listaIdentificadores.get(i+1).toString()) + Float.valueOf(parser.listaIdentificadores.get(j+1).toString()));
                                        System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + (Float.valueOf(parser.listaIdentificadores.get(i+1).toString()) + Float.valueOf(parser.listaIdentificadores.get(j+1).toString())));
                                        bandera = true;
                                        break;
                                    }else{
                                       System.out.println("ERROR: LA VARIABLE " + n4 + " NO ES DE TIPO FLOTANTE");
                                    }
                                }
                            }if(bandera){
                                break;
                            }else{
                                System.out.println("ERROR:LA VARIABLE " + n4 + " NO HA SIDO DECLARADA");
                            }
                        }else{
                            System.out.println("ERROR: LA VARIABLE "+n3+ " NO ES DE TIPO FLOTANTE");
                        }
                    }
                }
                if(bandera2){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n3 + " NO HA SIDO DECLARADA");
                }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DECLARACION_FLOAT ::= Float Id Asig Entero Resta Flotante ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(Integer.valueOf(n3.toString())-Float.valueOf(n4.toString()));
                  System.out.println("Declaracion de variable Flotante " + n2 + " por medio de la Resta " + n3 + " - " +n4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DECLARACION_FLOAT ::= Float Id Asig Flotante Resta Entero ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(Float.valueOf(n3.toString())-Integer.valueOf(n4.toString()));
                  System.out.println("Declaracion de variable Flotante " + n2 + " por medio de la Resta " + n3 + " - " +n4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DECLARACION_FLOAT ::= Float Id Asig Entero Multiplicacion Flotante ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(Integer.valueOf(n3.toString())*Float.valueOf(n4.toString()));
                  System.out.println("Declaracion de variable Flotante " + n2 + " por medio de la Multiplicacion " + n3 + " * " +n4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DECLARACION_FLOAT ::= Float Id Asig Flotante Multiplicacion Entero ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(Float.valueOf(n3.toString())*Integer.valueOf(n4.toString()));
                  System.out.println("Declaracion de variable Flotante " + n2 + " por medio de la Multiplicacion " + n3 + " * " +n4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // DECLARACION_FLOAT ::= Float Id Asig Entero Division Flotante ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(Integer.valueOf(n3.toString())/Float.valueOf(n4.toString()));
                  System.out.println("Declaracion de variable Flotante " + n2 + " por medio de la Division: " +n3+ " / " +n4 );
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACION_FLOAT ::= Float Id Asig Flotante Division Entero ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(Float.valueOf(n3.toString())/Integer.valueOf(n4.toString()));
                  System.out.println("Declaracion de variable Flotante " + n2 + " por medio de la Division: " +n3+ " / " +n4 );
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACION_FLOAT ::= Float Id Asig Entero Suma Flotante ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(Integer.valueOf(n3.toString())+Float.valueOf(n4.toString()));
                  System.out.println("Declaracion de variable Flotante " + n2 + " por medio de la Division: " +n3+ " + " +n4 );
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION_FLOAT ::= Float Id Asig Flotante Suma Entero ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(Float.valueOf(n3.toString())+Integer.valueOf(n4.toString()));
                  System.out.println("Declaracion de variable Flotante " + n2 + " por medio de la Division: " +n3+ " + " +n4 );
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION_FLOAT ::= Float Id Asig Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("float")){
                            parser.listaIdentificadores.add(n1);
                            parser.listaIdentificadores.add(n2);
                            parser.listaIdentificadores.add(parser.listaIdentificadores.get(i+1));
                            System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + parser.listaIdentificadores.get(i+1));
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR: LA VARIABLE ENCONTRADA NO ES DE TIPO FLOTANTE");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR: LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DECLARACION_FLOAT ::= Id Asig Flotante ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                boolean bandera = false;
                for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                        if(parser.listaIdentificadores.get(i-1).equals("float")){
                            parser.listaIdentificadores.set(i+1,n2);
                            System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + n2);
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR:LA VARIABLE ENCONTRADA NO ES DE TIPO FLOTANTE");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DECLARACION_FLOAT ::= Float Id Asig Flotante Resta Flotante ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(Float.valueOf(n3.toString())-Float.valueOf(n4.toString()));
                  System.out.println("Declaracion de variable Flotante " + n2 + " por medio de la Resta " + n3 + " - " +n4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARACION_FLOAT ::= Float Id Asig Flotante Multiplicacion Flotante ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(Float.valueOf(n3.toString())*Float.valueOf(n4.toString()));
                  System.out.println("Declaracion de variable Flotante " + n2 + " por medio de la Multiplicacion " + n3 + " * " +n4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARACION_FLOAT ::= Float Id Asig Flotante Suma Flotante ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(Float.valueOf(n3.toString())+Float.valueOf(n4.toString()));
                  System.out.println("Declaracion de variable Flotante " + n2 + " por medio de la suma " + n3 + " + " +n4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION_FLOAT ::= Float Id Asig Flotante ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                  System.out.println("Declaracion de variable Flotante "+ n2 + " con valor " + n3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_FLOAT ::= Float Id Asig Flotante Division Flotante ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(Float.valueOf(n3.toString())/Float.valueOf(n4.toString()));
                  System.out.println("Declaracion de variable Flotante " + n2 + " por medio de la Division: " +n3+ " / " +n4 );
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_FLOAT ::= Float Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                 System.out.println("Declaracion de variable Flotante: " +n2 + " sin valor");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_FLOAT",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION_ENTEROS ::= Id Asig Id Division Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 boolean bandera2 = false;
                 boolean bandera3 = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                            bandera2 = true;
                            for(int j = 1;j < parser.listaIdentificadores.size();j=j+3){
                                if(parser.listaIdentificadores.get(j).equals(n2)){
                                        bandera3 = true;
                                        for(int x = 1;x < parser.listaIdentificadores.size();x=x+3){
                                            if(parser.listaIdentificadores.get(x).equals(n3)){
                                                if(parser.listaIdentificadores.get(i-1).equals(parser.listaIdentificadores.get(j-1))){
                                                    if(parser.listaIdentificadores.get(j-1).equals(parser.listaIdentificadores.get(x-1))){
                                                        parser.listaIdentificadores.set(i+1,Float.valueOf(parser.listaIdentificadores.get(j+1).toString())/Float.valueOf(parser.listaIdentificadores.get(x+1).toString()));
                                                        System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + (Float.valueOf(parser.listaIdentificadores.get(j+1).toString())/Float.valueOf(parser.listaIdentificadores.get(x+1).toString())));
                                                        bandera = true;
                                                        break;
                                                    }else{
                                                        System.out.println("ERROR: LAS VARIABLES NO SON DEL MISMO TIPO");
                                                    }
                                                }else{
                                                     System.out.println("ERROR: LAS VARIABLES NO SON DEL MISMO TIPO");
                                                }
                                            }
                                        }if(bandera){
                                            break;
                                        }else{
                                            System.out.println("ERROR:LA VARIABLE " + n3 + " NO HA SIDO DECLARADA");
                                        }
                                }
                            }if(bandera3){
                                break;
                            }else{
                                System.out.println("ERROR:LA VARIABLE " + n2 + " NO HA SIDO DECLARADA");
                            }
                    }
                }
                if(bandera2){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION_ENTEROS ::= Id Asig Id Multiplicacion Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 boolean bandera2 = false;
                 boolean bandera3 = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                            bandera2 = true;
                            for(int j = 1;j < parser.listaIdentificadores.size();j=j+3){
                                if(parser.listaIdentificadores.get(j).equals(n2)){
                                        bandera3 = true;
                                        for(int x = 1;x < parser.listaIdentificadores.size();x=x+3){
                                            if(parser.listaIdentificadores.get(x).equals(n3)){
                                                if(parser.listaIdentificadores.get(i-1).equals(parser.listaIdentificadores.get(j-1))){
                                                    if(parser.listaIdentificadores.get(j-1).equals(parser.listaIdentificadores.get(x-1))){
                                                        parser.listaIdentificadores.set(i+1,Float.valueOf(parser.listaIdentificadores.get(j+1).toString())*Float.valueOf(parser.listaIdentificadores.get(x+1).toString()));
                                                        System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + (Float.valueOf(parser.listaIdentificadores.get(j+1).toString())*Float.valueOf(parser.listaIdentificadores.get(x+1).toString())));
                                                        bandera = true;
                                                        break;
                                                    }else{
                                                        System.out.println("ERROR: LAS VARIABLES NO SON DEL MISMO TIPO");
                                                    }
                                                }else{
                                                     System.out.println("ERROR: LAS VARIABLES NO SON DEL MISMO TIPO");
                                                }
                                            }
                                        }if(bandera){
                                            break;
                                        }else{
                                            System.out.println("ERROR:LA VARIABLE " + n3 + " NO HA SIDO DECLARADA");
                                        }
                                }
                            }if(bandera3){
                                break;
                            }else{
                                System.out.println("ERROR:LA VARIABLE " + n2 + " NO HA SIDO DECLARADA");
                            }
                    }
                }
                if(bandera2){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLARACION_ENTEROS ::= Id Asig Id Resta Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 boolean bandera2 = false;
                 boolean bandera3 = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                            bandera2 = true;
                            for(int j = 1;j < parser.listaIdentificadores.size();j=j+3){
                                if(parser.listaIdentificadores.get(j).equals(n2)){
                                        bandera3 = true;
                                        for(int x = 1;x < parser.listaIdentificadores.size();x=x+3){
                                            if(parser.listaIdentificadores.get(x).equals(n3)){
                                                if(parser.listaIdentificadores.get(i-1).equals(parser.listaIdentificadores.get(j-1))){
                                                    if(parser.listaIdentificadores.get(j-1).equals(parser.listaIdentificadores.get(x-1))){
                                                        parser.listaIdentificadores.set(i+1,Float.valueOf(parser.listaIdentificadores.get(j+1).toString())-Float.valueOf(parser.listaIdentificadores.get(x+1).toString()));
                                                        System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + (Float.valueOf(parser.listaIdentificadores.get(j+1).toString())-Float.valueOf(parser.listaIdentificadores.get(x+1).toString())));
                                                        bandera = true;
                                                        break;
                                                    }else{
                                                        System.out.println("ERROR: LAS VARIABLES NO SON DEL MISMO TIPO");
                                                    }
                                                }else{
                                                     System.out.println("ERROR: LAS VARIABLES NO SON DEL MISMO TIPO");
                                                }
                                            }
                                        }if(bandera){
                                            break;
                                        }else{
                                            System.out.println("ERROR:LA VARIABLE " + n3 + " NO HA SIDO DECLARADA");
                                        }
                                }
                            }if(bandera3){
                                break;
                            }else{
                                System.out.println("ERROR:LA VARIABLE " + n2 + " NO HA SIDO DECLARADA");
                            }
                    }
                }
                if(bandera2){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLARACION_ENTEROS ::= Id Asig Id Suma Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 boolean bandera2 = false;
                 boolean bandera3 = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                            bandera2 = true;
                            for(int j = 1;j < parser.listaIdentificadores.size();j=j+3){
                                if(parser.listaIdentificadores.get(j).equals(n2)){
                                        bandera3 = true;
                                        for(int x = 1;x < parser.listaIdentificadores.size();x=x+3){
                                            if(parser.listaIdentificadores.get(x).equals(n3)){
                                                if(parser.listaIdentificadores.get(i-1).equals(parser.listaIdentificadores.get(j-1))){
                                                    if(parser.listaIdentificadores.get(j-1).equals(parser.listaIdentificadores.get(x-1))){
                                                        parser.listaIdentificadores.set(i+1,Float.valueOf(parser.listaIdentificadores.get(j+1).toString())+Float.valueOf(parser.listaIdentificadores.get(x+1).toString()));
                                                        System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + (Float.valueOf(parser.listaIdentificadores.get(j+1).toString())+Float.valueOf(parser.listaIdentificadores.get(x+1).toString())));
                                                        bandera = true;
                                                        break;
                                                    }else{
                                                        System.out.println("ERROR: LAS VARIABLES NO SON DEL MISMO TIPO");
                                                    }
                                                }else{
                                                     System.out.println("ERROR: LAS VARIABLES NO SON DEL MISMO TIPO");
                                                }
                                            }
                                        }if(bandera){
                                            break;
                                        }else{
                                            System.out.println("ERROR:LA VARIABLE " + n3 + " NO HA SIDO DECLARADA");
                                        }
                                }
                            }if(bandera3){
                                break;
                            }else{
                                System.out.println("ERROR:LA VARIABLE " + n2 + " NO HA SIDO DECLARADA");
                            }
                    }
                }
                if(bandera2){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARACION_ENTEROS ::= Int Id Asig Id Division Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 boolean bandera2 = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("int")){
                            bandera2 = true;
                            for(int j = 1;j < parser.listaIdentificadores.size();j=j+3){
                                if(parser.listaIdentificadores.get(j).equals(n4)){
                                    if(parser.listaIdentificadores.get(j-1).equals("int")){
                                        parser.listaIdentificadores.add(n1);
                                        parser.listaIdentificadores.add(n2);
                                        parser.listaIdentificadores.add(Integer.valueOf(parser.listaIdentificadores.get(i+1).toString()) / Integer.valueOf(parser.listaIdentificadores.get(j+1).toString()));
                                        System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + (Integer.valueOf(parser.listaIdentificadores.get(i+1).toString()) / Integer.valueOf(parser.listaIdentificadores.get(j+1).toString())));
                                        bandera = true;
                                        break;
                                    }else{
                                       System.out.println("ERROR: LA VARIABLE " + n4 + " NO ES DE TIPO ENTERO");
                                    }
                                }
                            }if(bandera){
                                break;
                            }else{
                                System.out.println("ERROR:LA VARIABLE " + n4 + " NO HA SIDO DECLARADA");
                            }
                        }else{
                            System.out.println("ERROR: LA VARIABLE " + n3 + " NO ES DE TIPO ENTERO");
                        }
                    }
                }
                if(bandera2){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n3 + " NO HA SIDO DECLARADA");
                }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARACION_ENTEROS ::= Int Id Asig Id Multiplicacion Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 boolean bandera2 = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("int")){
                            bandera2 = true;
                            for(int j = 1;j < parser.listaIdentificadores.size();j=j+3){
                                if(parser.listaIdentificadores.get(j).equals(n4)){
                                    if(parser.listaIdentificadores.get(j-1).equals("int")){
                                        parser.listaIdentificadores.add(n1);
                                        parser.listaIdentificadores.add(n2);
                                        parser.listaIdentificadores.add(Integer.valueOf(parser.listaIdentificadores.get(i+1).toString()) * Integer.valueOf(parser.listaIdentificadores.get(j+1).toString()));
                                        System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + (Integer.valueOf(parser.listaIdentificadores.get(i+1).toString()) * Integer.valueOf(parser.listaIdentificadores.get(j+1).toString())));
                                        bandera = true;
                                        break;
                                    }else{
                                       System.out.println("ERROR: LA VARIABLE " + n4 + " NO ES DE TIPO ENTERO");
                                    }
                                }
                            }if(bandera){
                                break;
                            }else{
                                System.out.println("ERROR:LA VARIABLE " + n4 + " NO HA SIDO DECLARADA");
                            }
                        }else{
                            System.out.println("ERROR: LA VARIABLE " + n3 + " NO ES DE TIPO ENTERO");
                        }
                    }
                }
                if(bandera2){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n3 + " NO HA SIDO DECLARADA");
                }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARACION_ENTEROS ::= Int Id Asig Id Resta Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 boolean bandera2 = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("int")){
                            bandera2 = true;
                            for(int j = 1;j < parser.listaIdentificadores.size();j=j+3){
                                if(parser.listaIdentificadores.get(j).equals(n4)){
                                    if(parser.listaIdentificadores.get(j-1).equals("int")){
                                        parser.listaIdentificadores.add(n1);
                                        parser.listaIdentificadores.add(n2);
                                        parser.listaIdentificadores.add(Integer.valueOf(parser.listaIdentificadores.get(i+1).toString()) - Integer.valueOf(parser.listaIdentificadores.get(j+1).toString()));
                                        System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + (Integer.valueOf(parser.listaIdentificadores.get(i+1).toString()) - Integer.valueOf(parser.listaIdentificadores.get(j+1).toString())));
                                        bandera = true;
                                        break;
                                    }else{
                                       System.out.println("ERROR: LA VARIABLE " + n4 + " NO ES DE TIPO ENTERO");
                                    }
                                }
                            }if(bandera){
                                break;
                            }else{
                                System.out.println("ERROR:LA VARIABLE " + n4 + " NO HA SIDO DECLARADA");
                            }
                        }else{
                            System.out.println("ERROR: LA VARIABLE " + n3 + " NO ES DE TIPO ENTERO");
                        }
                    }
                }
                if(bandera2){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n3 + " NO HA SIDO DECLARADA");
                }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARACION_ENTEROS ::= Int Id Asig Id Suma Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 boolean bandera2 = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("int")){
                            bandera2 = true;
                            for(int j = 1;j < parser.listaIdentificadores.size();j=j+3){
                                if(parser.listaIdentificadores.get(j).equals(n4)){
                                    if(parser.listaIdentificadores.get(j-1).equals("int")){
                                        parser.listaIdentificadores.add(n1);
                                        parser.listaIdentificadores.add(n2);
                                        parser.listaIdentificadores.add(Integer.valueOf(parser.listaIdentificadores.get(i+1).toString()) + Integer.valueOf(parser.listaIdentificadores.get(j+1).toString()));
                                        System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + (Integer.valueOf(parser.listaIdentificadores.get(i+1).toString()) + Integer.valueOf(parser.listaIdentificadores.get(j+1).toString())));
                                        bandera = true;
                                        break;
                                    }else{
                                       System.out.println("ERROR: LA VARIABLE " + n4 + " NO ES DE TIPO ENTERO");
                                    }
                                }
                            }if(bandera){
                                break;
                            }else{
                                System.out.println("ERROR:LA VARIABLE " + n4 + " NO HA SIDO DECLARADA");
                            }
                        }else{
                            System.out.println("ERROR: LA VARIABLE "+n3+ " NO ES DE TIPO ENTERO");
                        }
                    }
                }
                if(bandera2){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n3 + " NO HA SIDO DECLARADA");
                }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARACION_ENTEROS ::= Int Id Asig Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 boolean bandera = false;
                 for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n3)){
                        if(parser.listaIdentificadores.get(i-1).equals("int")){
                            parser.listaIdentificadores.add(n1);
                            parser.listaIdentificadores.add(n2);
                            parser.listaIdentificadores.add(parser.listaIdentificadores.get(i+1));
                            System.out.println("Asignacion de la variable " + n2 + " Se le asigno el valor: " + parser.listaIdentificadores.get(i+1));
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR: LA VARIABLE ENCONTRADA NO ES DE TIPO ENTERO");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION_ENTEROS ::= Id Asig Entero ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                boolean bandera = false;
                for(int i = 1;i < parser.listaIdentificadores.size();i=i+3){
                    if(parser.listaIdentificadores.get(i).equals(n1)){
                        if(parser.listaIdentificadores.get(i-1).equals("int")){
                            parser.listaIdentificadores.set(i+1,n2);
                            System.out.println("Asignacion de la variable " + n1 + " Se le asigno el valor: " + n2);
                            bandera = true;
                            break;
                        }else{
                            System.out.println("ERROR: LA VARIABLE ENCONTRADA NO ES DE TIPO ENTERO");
                        }
                    }
                }
                if(bandera){

                }else{
                    System.out.println("ERROR:LA VARIABLE " + n1 + " NO HA SIDO DECLARADA");
                }
               
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION_ENTEROS ::= Int Id Asig Entero Resta Entero ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(Integer.valueOf(n3.toString())-Integer.valueOf(n4.toString()));
                  System.out.println("Declaracion de variable entera " + n2 + " por medio de la Resta " + n3 + " - " +n4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARACION_ENTEROS ::= Int Id Asig Entero Multiplicacion Entero ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(Integer.valueOf(n3.toString())*Integer.valueOf(n4.toString()));
                  System.out.println("Declaracion de variable entera " + n2 + " por medio de la Multiplicacion " + n3 + " * " +n4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARACION_ENTEROS ::= Int Id Asig Entero Suma Entero ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(Integer.valueOf(n3.toString())+Integer.valueOf(n4.toString()));
                  System.out.println("Declaracion de variable entera " + n2 + " por medio de la suma " + n3 + " + " +n4);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARACION_ENTEROS ::= Int Id Asig Entero ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(n3);
                  System.out.println("Declaracion de variable entera "+ n2 + " con valor " + n3);
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARACION_ENTEROS ::= Int Id Asig Entero Division Entero ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int n3left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int n3right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object n3 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int n4left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n4right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n4 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                  parser.listaIdentificadores.add(n1);
                  parser.listaIdentificadores.add(n2);
                  parser.listaIdentificadores.add(Integer.valueOf(n3.toString())/Integer.valueOf(n4.toString()));
                  System.out.println("Declaracion de variable entera " + n2 + " por medio de la Division: " +n3+ " / " +n4 );
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARACION_ENTEROS ::= Int Id ExprFinal 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object n2 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                 parser.listaIdentificadores.add(n1);
                 parser.listaIdentificadores.add(n2);
                 parser.listaIdentificadores.add(0);
                 System.out.println("Declaracion de variable entera " + n2 + " sin valor");
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARACION_ENTEROS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SENTENCIA ::= SENTENCIA DECLARACION_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SENTENCIA ::= DECLARACION_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SENTENCIA ::= SENTENCIA DECLARACION_CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // SENTENCIA ::= DECLARACION_CHAR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // SENTENCIA ::= SENTENCIA DECLARACION_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // SENTENCIA ::= DECLARACION_STRING 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SENTENCIA ::= SENTENCIA DECLARACION_FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SENTENCIA ::= DECLARACION_FLOAT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SENTENCIA ::= SENTENCIA DECLARACION_ENTEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // SENTENCIA ::= DECLARACION_ENTEROS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Int main ParentesisA ParentesisC LlaveA SENTENCIA LlaveC 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

